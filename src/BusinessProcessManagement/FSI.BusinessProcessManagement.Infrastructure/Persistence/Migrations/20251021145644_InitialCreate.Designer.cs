// <auto-generated />
using System;
using FSI.BusinessProcessManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FSI.BusinessProcessManagement.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(BpmDbContext))]
    [Migration("20251021145644_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AuditId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActionTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("longtext")
                        .HasColumnName("AdditionalInfo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("ScreenId")
                        .HasColumnType("bigint")
                        .HasColumnName("ScreenId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.HasIndex("UserId", "ActionTimestamp")
                        .HasDatabaseName("IX_Audit_User_Time");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("DepartmentId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("DepartmentName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Department_Name");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.Process", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ProcessId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("DepartmentId");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ProcessName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId", "Name")
                        .HasDatabaseName("UQ_ProcessName_Department");

                    b.ToTable("ProcessoBPM", (string)null);
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.ProcessExecution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ExecutionId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CompletedAt");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("ProcessId")
                        .HasColumnType("bigint")
                        .HasColumnName("ProcessId");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext")
                        .HasColumnName("Remarks");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("StartedAt");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<long>("StepId")
                        .HasColumnType("bigint")
                        .HasColumnName("StepId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StepId");

                    b.HasIndex("UserId");

                    b.HasIndex("ProcessId", "Status")
                        .HasDatabaseName("IX_Execution_Process_Status");

                    b.ToTable("ProcessExecution", (string)null);
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.ProcessStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("StepId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssignedRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssignedRoleId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("ProcessId")
                        .HasColumnType("bigint")
                        .HasColumnName("ProcessId");

                    b.Property<long?>("ProcessId1")
                        .HasColumnType("bigint");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("StepName");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int")
                        .HasColumnName("StepOrder");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedRoleId");

                    b.HasIndex("ProcessId1");

                    b.HasIndex("ProcessId", "StepOrder")
                        .HasDatabaseName("IX_ProcessStep_Process_StepOrder");

                    b.ToTable("ProcessStep", (string)null);
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RoleId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RoleName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Role_Name");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.RoleScreenPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RoleScreenPermissionId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanCreate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("CanCreate");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("CanDelete");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("CanEdit");

                    b.Property<bool>("CanView")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("CanView");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("RoleId");

                    b.Property<long>("ScreenId")
                        .HasColumnType("bigint")
                        .HasColumnName("ScreenId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.HasIndex("RoleId", "ScreenId")
                        .IsUnique();

                    b.ToTable("RoleScreenPermission", (string)null);
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.Screen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ScreenId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ScreenName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Screen_Name");

                    b.ToTable("Screen", (string)null);
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("DepartmentId");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsActive");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PasswordHash");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UQ_Usuario_Email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("UQ_Usuario_Username");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("UserRoleId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("AssignedAt");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("RoleId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("UQ_UserRole_User_Role");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.Screen", null)
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_AuditLog_Screen");

                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_AuditLog_User");
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.ProcessExecution", b =>
                {
                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.Process", null)
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProcessExecution_Process");

                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.ProcessStep", null)
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProcessExecution_Step");

                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ProcessExecution_User");
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.ProcessStep", b =>
                {
                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("AssignedRoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ProcessStep_Role");

                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.Process", null)
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProcessStep_Process");

                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.Process", null)
                        .WithMany("Steps")
                        .HasForeignKey("ProcessId1");
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.RoleScreenPermission", b =>
                {
                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RoleScreenPermission_Role");

                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.Screen", null)
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RoleScreenPermission_Screen");
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.User", b =>
                {
                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Usuario_Department");
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.HasOne("FSI.BusinessProcessManagement.Domain.Entities.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.Process", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("FSI.BusinessProcessManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
